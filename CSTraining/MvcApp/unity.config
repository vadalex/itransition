<?xml version="1.0" encoding="utf-8"?>
<unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
  <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Microsoft.Practices.Unity.Interception.Configuration" />
  <typeAliases>        
    <typeAlias alias="MyContext" type="DAL.MyContext, DAL" />
    <typeAlias alias="IRepository" type="Contracts.DAL.IRepository`1, Contracts" />
    <typeAlias alias="DataRepository" type="DAL.DataRepository`1, DAL" />
    <typeAlias alias="ILogger" type="Contracts.ILogger, Contracts" />
    <typeAlias alias="ICustomerBL" type="Contracts.BLL.ICustomerBL, Contracts" />
    <typeAlias alias="IOrderBL" type="Contracts.BLL.IOrderBL, Contracts" />
    <typeAlias alias="IUserBL" type="Contracts.BLL.IUserBL, Contracts" />
    <typeAlias alias="IProductBL" type="Contracts.BLL.IProductBL, Contracts" />
    <typeAlias alias="ISupplierBL" type="Contracts.BLL.ISupplierBL, Contracts" />
    <typeAlias alias="ICommentBL" type="Contracts.BLL.ICommentBL, Contracts" />
    <typeAlias alias="IBusinessLogicLayer" type="Contracts.BLL.IBusinessLogicLayer, Contracts" />
    <typeAlias alias="Logger" type="BusinessLogic.Logger, BusinessLogic" />
    <typeAlias alias="CustomerBL" type="BusinessLogic.BLL.CustomerBL, BusinessLogic" />
    <typeAlias alias="OrderBL" type="BusinessLogic.BLL.OrderBL, BusinessLogic" />
    <typeAlias alias="UserBL" type="BusinessLogic.BLL.UserBL, BusinessLogic" />
    <typeAlias alias="ProductBL" type="BusinessLogic.BLL.ProductBL, BusinessLogic" />    
    <typeAlias alias="SupplierBL" type="BusinessLogic.BLL.SupplierBL, BusinessLogic" />
    <typeAlias alias="CommentBL" type="BusinessLogic.BLL.CommentBL, BusinessLogic" />
    <typeAlias alias="BusinessLogicLayer" type="BusinessLogic.BusinessLogicLayer, BusinessLogic" />
    <typeAlias alias="Customer" type="Entities.Customer, Entities" />
    <typeAlias alias="Order" type="Entities.Order, Entities" />
    <typeAlias alias="Product" type="Entities.Product, Entities" />    
    <typeAlias alias="Supplier" type="Entities.Supplier, Entities" />
    <typeAlias alias="Comment" type="Entities.Comment, Entities" />
    <typeAlias alias="User" type="Entities.User, Entities" />
    <typeAlias alias="LoggingInterceptor" type="MvcApp.Interceptors.LoggingInterceptor, MvcApp" />
  </typeAliases>
  <container>
    <extension type="Interception" />
    <register type="ILogger" mapTo="Logger">
    </register>
    <register type="MyContext" name="MyContext">
      <lifetime type="singleton"/>
    </register>
    <register type="IRepository[]" mapTo="DataRepository[]">      
    </register>
    <register type="ICustomerBL" mapTo="CustomerBL">      
      <constructor>
        <param name="repository" dependencyType="IRepository[Customer]"></param>
      </constructor>
      <interceptor type="InterfaceInterceptor" />
      <interceptionBehavior type="PolicyInjectionBehavior" />
    </register>
    <register type="IOrderBL" mapTo="OrderBL">
      <constructor>
        <param name="repository" dependencyType="IRepository[Order]"></param>
      </constructor>
      <interceptor type="InterfaceInterceptor" />
      <interceptionBehavior type="PolicyInjectionBehavior" />
    </register>
    <register type="IUserBL" mapTo="UserBL">
      <constructor>
        <param name="repository" dependencyType="IRepository[User]"></param>
      </constructor>
      <interceptor type="InterfaceInterceptor" />
      <interceptionBehavior type="PolicyInjectionBehavior" />
    </register>
    <register type="IProductBL" mapTo="ProductBL">
      <constructor>
        <param name="repository" dependencyType="IRepository[Product]"></param>
      </constructor>
      <interceptor type="InterfaceInterceptor" />
      <interceptionBehavior type="PolicyInjectionBehavior" />
    </register>
    <register type="ISupplierBL" mapTo="SupplierBL">
      <constructor>
        <param name="repository" dependencyType="IRepository[Supplier]"></param>
      </constructor>
      <interceptor type="InterfaceInterceptor" />
      <interceptionBehavior type="PolicyInjectionBehavior" />
    </register>
    <register type="ICommentBL" mapTo="CommentBL">
      <constructor>
        <param name="repository" dependencyType="IRepository[Comment]"></param>
      </constructor>
      <interceptor type="InterfaceInterceptor" />
      <interceptionBehavior type="PolicyInjectionBehavior" />
    </register>
    <register type="IBusinessLogicLayer" mapTo="BusinessLogicLayer"></register>
    <interception>
      <policies>
        <add name="Policy">
          <matchingRule name="MatchMethods" type="MemberNameMatchingRule">
            <constructor>
              <param name="namesToMatch">
                <array type="string[]">
                  <value value="GetSingle" />
                  <value value="GetAll" />
                  <value value="Update" />
                  <value value="Remove" />
                  <value value="Add" />
                </array>
              </param>
            </constructor>
          </matchingRule>           
          <matchingRule name="NameSpaceMatch" type="NamespaceMatchingRule">
            <constructor>
              <param name="namespaceName" value="BusinessLogic.BLL" />
            </constructor>
          </matchingRule>
          <callHandler name="Handler" type="LoggingInterceptor">
            <lifetime type="singleton"/>
          </callHandler>
        </add>        
      </policies>
    </interception>
  </container>
</unity>